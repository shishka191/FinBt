import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
from db import get_user_data, update_user_data

TOKEN = os.getenv("TOKEN", "8151676195:AAGAxxkgVYIC1FPdfe405Kk33ecP0vW7uMg")
ADMIN_ID = int(os.getenv("ADMIN_ID", "5160389108"))
BACKUP_CHANNEL_ID = int(os.getenv("BACKUP_CHANNEL_ID", "-1002589404034"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

main_keyboard = [["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"], ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–µ–Ω—å"]]

async def start(update: Update, context: CallbackContext.DEFAULT_TYPE):
    user_id = update.effective_user.id
    get_user_data(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.",
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    )

async def send_backup(context: CallbackContext.DEFAULT_TYPE, message: str):
    try:
        await context.bot.send_message(chat_id=BACKUP_CHANNEL_ID, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞: {e}")

async def handle_message(update: Update, context: CallbackContext.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text.startswith("‚ûï"):
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
        context.user_data["mode"] = "income"
    elif text.startswith("‚ûñ"):
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        context.user_data["mode"] = "expense"
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        data = get_user_data(user_id)
        await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {data}")
    elif text == "üí∞ –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–µ–Ω—å":
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
    else:
        if "mode" in context.user_data:
            try:
                amount = float(text)
                mode = context.user_data.pop("mode")
                update_user_data(user_id, amount, mode)
                await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if mode == 'income' else '–†–∞—Å—Ö–æ–¥'} –¥–æ–±–∞–≤–ª–µ–Ω: {amount}")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞ –≤ –∫–∞–Ω–∞–ª
                await send_backup(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª {'–¥–æ—Ö–æ–¥' if mode == 'income' else '—Ä–∞—Å—Ö–æ–¥'}: {amount}")
            except ValueError:
                await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ...")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
